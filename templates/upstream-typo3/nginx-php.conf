###
# vkucukcakar/nginx
# NGINX Docker image with automatic configuration file creation and export
# Copyright (c) 2017 Volkan Kucukcakar
#
# This file is part of vkucukcakar/nginx.
#
# vkucukcakar/nginx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# vkucukcakar/nginx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This copyright notice and license must be retained in all files and derivative works.
###

###
# Container     : ${CONTAINER_NAME}
# Location		: /configurations/nginx-php.conf
# Description   : Upstream server, Nginx server block, php location configuration include file. Edit according to your needs.
# Note          : This file is automatically created by vkucukcakar/nginx image
###

		try_files $uri =404;	# Checks the existence of files in the specified order and uses the first found file for request processing (default=)

		##
		# Fastcgi cache. Cache details. Initialise cache parameters (See http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html )
		##

		#fastcgi_cache fastcgi_cache_zone;													# Defines a shared memory zone used for caching (default=off)
		##fastcgi_cache_methods GET HEAD;													# If the client request method is listed in this directive then the response will be cached (default=GET HEAD)
		##fastcgi_cache_revalidate on;														# Enables revalidation of expired cache items using conditional requests with the �If-Modified-Since� and �If-None-Match� header fields (default=off)
		##fastcgi_cache_min_uses 3;															# Sets the number of requests after which the response will be cached (default=1)
		##fastcgi_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;# Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server (default=off)
		##fastcgi_cache_lock on;																# When enabled, only one request at a time will be allowed to populate a new cache element identified according to the fastcgi_cache_key directive by passing a request to a FastCGI server (default=off)
		#fastcgi_cache_key $scheme$request_method$host$request_uri;							# Defines a key for caching (default=)
		#add_header X-Cache-Status $upstream_cache_status;									# Add X-Cache-Status HTTP header in responses to clients. Uncomment to observe cache status and debug.
		#fastcgi_ignore_headers Set-Cookie;													# Disables processing of certain response header fields from the FastCGI server (default=)
		##fastcgi_ignore_headers Set-Cookie Expires Cache-Control;							# For debugging
		##fastcgi_cache_valid 200 302 1m;													# Sets caching time for different response codes (default=)
		##fastcgi_cache_valid 301 1m;														# Sets caching time for different response codes (default=)
		##fastcgi_cache_valid 404 1m;														# Sets caching time for different response codes (default=)
		#fastcgi_cache_valid any 1m;															# Sets caching time for different response codes (default=)


		##
		# Fastcgi cache purge
		##

		# * fastcgi_cache_purge is available as part of nginx commercial subscription (See http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_cache_purge )
		# * Note that its usage is different than the old fastcgi_cache_purge that comes with 3rd party module http://labs.frickle.com/nginx_ngx_cache_purge/
		# * Of course you can use other 3rd party solutions or just forget about cache purging and use smaller cache timeouts for dynamic pages


		##
		# Fastcgi no-cache. ($no_cache defined above)
		##

		#fastcgi_cache_bypass $no_cache;													# Defines conditions under which the response will not be taken from a cache (default=)
		#fastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;						# Defines conditions under which the response will not be taken from a cache (default=)
		#fastcgi_cache_bypass $http_pragma $http_authorization;								# Defines conditions under which the response will not be taken from a cache (default=)
		#
		#fastcgi_no_cache $no_cache;														# Defines conditions under which the response will not be saved to a cache (default=)
		#fastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;							# Defines conditions under which the response will not be saved to a cache (default=)
		#fastcgi_no_cache $http_pragma $http_authorization;									# Defines conditions under which the response will not be saved to a cache (default=)


		##
		# Fastcgi pass
		##

		include /etc/nginx/fastcgi_params;

		# TYPO3 >

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }
        fastcgi_buffer_size 32k;
        fastcgi_buffers 8 16k;
        fastcgi_connect_timeout 240s;
        fastcgi_read_timeout 240s;
        fastcgi_send_timeout 240s;

        # < TYPO3

		fastcgi_pass ${PHP_CONTAINER_NAME}:9000;
		fastcgi_index index.php;

		# PHP-FPM config
		fastcgi_param DOCUMENT_ROOT /var/www/html/public;
		fastcgi_param HOME /home/www-data;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;

		# Pass the real protocol related information to PHP
		fastcgi_param HTTPS $http_docker_x_https if_not_empty;
		fastcgi_param SERVER_PORT $http_docker_x_server_port;
		fastcgi_param REQUEST_SCHEME $http_docker_x_request_scheme;
		fastcgi_param HTTP_SCHEME $http_docker_x_request_scheme;
		fastcgi_param SERVER_PROTOCOL $http_docker_x_server_protocol;

		# Clear custom proxy headers. Trick to hide some custom headers from PHP
		fastcgi_param HTTP_DOCKER_X_HTTPS '' if_not_empty;
		fastcgi_param HTTP_DOCKER_X_REAL_IP '' if_not_empty;
		fastcgi_param HTTP_DOCKER_X_SERVER_PORT '' if_not_empty;
		fastcgi_param HTTP_DOCKER_X_REQUEST_SCHEME '' if_not_empty;
		fastcgi_param HTTP_DOCKER_X_SERVER_PROTOCOL '' if_not_empty;
