###
# vkucukcakar/nginx
# NGINX Docker image with automatic configuration file creation and export
# Copyright (c) 2017 Volkan Kucukcakar
#
# This file is part of vkucukcakar/nginx.
#
# vkucukcakar/nginx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# vkucukcakar/nginx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This copyright notice and license must be retained in all files and derivative works.
###

###
# Container     : ${CONTAINER_NAME}
# Symbolic link : /configurations/nginx-${_UPSTREAM_DOMAIN_NAME}.conf
# Description   : Reverse proxy, Nginx server block, location block configuration include file. Mostly resource related Nginx settings are present and well-commented. Edit according to your needs.
# Note          : This file is automatically created by vkucukcakar/nginx image
###

		##
		# Connection Limits - DOS protection
		##

		limit_conn connperip 50;					# Limit the number of connections to the server per a client IP
		#limit_conn connperserver 5000;				# Limit the total number of connections to the virtual host

		##
		# Request Limits - DOS protection
		##

		limit_req zone=reqperip burst=200;			# Allow not more than x request per second at an average, with bursts not exceeding xy requests. (nodelay is not good except Cloudflare/CDNs)
		#limit_req zone=reqperip burst=200 nodelay;	# Cloudflare/CDNs - Add "nodelay" to return 503 without delay to prevent Cloudflare returning 52x timeout/unreachable replies for the same users future requests for a few minutes.


		##
		# Naxsi (web application firewall). Check Naxsi core rules
		##

		LearningMode;					# Learning mode will not block any traffic, look at nginx logs...
		#SecRulesEnabled;				# Enable Naxsi for block
		SecRulesDisabled;				# Disable Naxsi for a part of block
		DeniedUrl "/RequestDenied";		# Denied url

		## Check rules
		CheckRule "$SQL >= 8" BLOCK;
		CheckRule "$RFI >= 8" BLOCK;
		CheckRule "$TRAVERSAL >= 4" BLOCK;
		CheckRule "$EVADE >= 4" BLOCK;
		CheckRule "$XSS >= 8" BLOCK;
		CheckRule "$UPLOAD >= 8" BLOCK;


		##
		# Naxsi. Check wordpress Naxsi rules (This is optional, Naxsi core rules shoud already be enabled)
		##

		## Include wordpress Naxsi rules (Ready in image. Downloaded from: https://github.com/nbs-system/naxsi-rules/ )
		#include /etc/nginx/naxsi-rules/wordpress-minimal.rules;
		#include /etc/nginx/naxsi-rules/wordpress.rules;

		## Check rules
		#


		##
		# Naxsi. Check for other community Naxsi rules (Ready in image. Downloaded from: https://github.com/nbs-system/naxsi-rules/ )
		##

		#include /etc/nginx/naxsi-rules/dokuwiki.rules;
		#include /etc/nginx/naxsi-rules/drupal.rules;
		#include /etc/nginx/naxsi-rules/etherpad-lite.rules;
		#include /etc/nginx/naxsi-rules/iris.rules;
		#include /etc/nginx/naxsi-rules/rutorrent.rules;
		#include /etc/nginx/naxsi-rules/zerobin.rules;

		## Check rules
		#


		##
		# Proxy cache. Cache details. Initialise cache parameters (See http://nginx.org/en/docs/http/ngx_http_proxy_module.html ) (Also see https://www.nginx.com/blog/nginx-caching-guide/ )
		##

		#proxy_cache proxy_cache_zone;														# Defines a shared memory zone used for caching (default=off)
		##proxy_cache_methods GET HEAD;														# If the client request method is listed in this directive then the response will be cached (default=GET HEAD)
		##proxy_cache_revalidate on;														# Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields (default=off)
		##proxy_cache_min_uses 3;															# Sets the number of requests after which the response will be cached (default=1)
		##proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;	# Determines in which cases a stale cached response can be used during communication with the proxied server (default=off)
		##proxy_cache_lock on;																# When enabled, only one request at a time will be allowed to populate a new cache element identified according to the proxy_cache_key directive by passing a request to a proxied server (default=off)
		#proxy_cache_key $scheme$proxy_host$request_uri;									# Defines a key for caching (default=$scheme$proxy_host$request_uri)
		#add_header X-Cache-Status $upstream_cache_status;									# Add X-Cache-Status HTTP header in responses to clients. Uncomment to observe cache status and debug.
		##proxy_ignore_headers Set-Cookie;													# Disables processing of certain response header fields from the proxied server (default=)
		##proxy_ignore_headers Set-Cookie Expires Cache-Control;							# Disables processing of certain response header fields from the proxied server (default=)
		##proxy_cache_valid 200 302 1m;														# Sets caching time for different response codes (default=)
		##proxy_cache_valid 301 1m;															# Sets caching time for different response codes (default=)
		##proxy_cache_valid 404 1m;															# Sets caching time for different response codes (default=)
		#proxy_cache_valid any 1m;															# Sets caching time for different response codes (default=)

		##
		# Proxy cache purge
		##

		# * proxy_cache_purge is available as part of nginx commercial subscription (See http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_purge )
		# * Note that its usage is different than the old proxy_cache_purge that comes with 3rd party module http://labs.frickle.com/nginx_ngx_cache_purge/
		# * Of course you can use other 3rd party solutions or just forget about cache purging and use smaller cache timeouts for dynamic pages


		##
		# Proxy no-cache. ($no_cache defined above)
		##

		#proxy_cache_bypass $no_cache;														# Defines conditions under which the response will not be taken from a cache (default=)
		#proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;						# Defines conditions under which the response will not be taken from a cache (default=)
		#proxy_cache_bypass $http_pragma $http_authorization;								# Defines conditions under which the response will not be taken from a cache (default=)
		#
		#proxy_no_cache $no_cache;															# Defines conditions under which the response will not be saved to a cache (default=)
		#proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;							# Defines conditions under which the response will not be saved to a cache (default=)
		#proxy_no_cache $http_pragma $http_authorization;									# Defines conditions under which the response will not be saved to a cache (default=)

		##
		# Proxy pass
		##

		proxy_pass http://upstream-${_UPSTREAM_CONTAINER_NAME};

		# When using keepalive; for HTTP, the proxy_http_version directive should be set to “1.1” and the “Connection” header field should be cleared. (Recommendation from http://nginx.org/en/docs/http/ngx_http_upstream_module.html)
		proxy_http_version 1.1;
		proxy_set_header Connection "";

		proxy_set_header	Host	$http_host;								# Required for docker (Recommendation from https://docs.docker.com/registry/recipes/nginx/ )

		# Standard proxy headers passed to upstream server
		#proxy_set_header	X-Real-IP			$remote_addr;				# i.e: "10.123.123.123" # only real ip (Recommendation from https://docs.docker.com/registry/recipes/nginx/)
		#proxy_set_header	X-Forwarded-For		$proxy_add_x_forwarded_for;	# i.e: "192.168.2.2, 10.123.123.123" # add ip forwarded for (Recommendation from https://docs.docker.com/registry/recipes/nginx/)
		#proxy_set_header	X-Forwarded-Proto	$scheme;					# i.e: "http", "https"

		# Custom proxy headers passed to upstream server (These will be cleared with if_not_empty in upstream configuration and will be hidden to PHP)
		proxy_set_header	Docker-X-Real-IP			$remote_addr;		# i.e: "10.123.123.123"
		proxy_set_header	Docker-X-Https				$https;				# i.e: "on", ""
		proxy_set_header	Docker-X-Server-Port		$server_port;		# i.e: "80", "443"
		proxy_set_header	Docker-X-Request-Scheme		$scheme;			# i.e: "http", "https"
		proxy_set_header	Docker-X-Server-Protocol	$server_protocol;	# i.e: "HTTP/1.0", "HTTP/1.1", "HTTP/2.0"

		proxy_connect_timeout	60s;										# Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds. (default=60s)
		proxy_read_timeout		120s;										# Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. (default=60s)
		proxy_send_timeout		60s;										# Sets a timeout for transmitting a request to the proxied server. The timeout is set only between two successive write operations, not for the transmission of the whole request. (default=60s)
