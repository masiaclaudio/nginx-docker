###
# vkucukcakar/nginx
# NGINX Docker image with automatic configuration file creation and export
# Copyright (c) 2017 Volkan Kucukcakar
#
# This file is part of vkucukcakar/nginx.
#
# vkucukcakar/nginx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# vkucukcakar/nginx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This copyright notice and license must be retained in all files and derivative works.
###

###
# Container     : ${CONTAINER_NAME}
# Symbolic link : /etc/nginx/nginx.conf
# Description   : Reverse proxy, Nginx configuration file. Mostly resource related Nginx settings are present and well-commented. Edit according to your needs.
# Note          : This file is automatically created by vkucukcakar/nginx image
###


##
# Root block - Derived from official Docker nginx image.
##

user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


##
# Root block - Extra (See http://nginx.org/en/docs/ngx_core_module.html )
##

worker_rlimit_nofile 20000;	# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes. (default=)


##
# Root block - Naxsi (web application firewall). Load Naxsi dynamic module
##

load_module modules/ngx_http_naxsi_module.so;


##
# Events block (See http://nginx.org/en/docs/ngx_core_module.html )
##

events {
	# Since this is a reverse proxy, worker_connections value should be higher than upstream servers' values.
	worker_connections  4096;	# Sets the maximum number of simultaneous connections that can be opened by a worker process. (default=512) (Docker default=1024)
	#multi_accept on;			# If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time. (default=off)
	#use epoll;					# Specifies the connection processing method to use. (default=)
	#accept_mutex off;			# If accept_mutex is enabled, worker processes will accept new connections by turn. (default=off)
}


##
# Http block
##

http {
	include       /etc/nginx/mime.types;	# Derived from official Docker nginx image.
	default_type  application/octet-stream;	# Defines the default MIME type of a response. (default=text/plain) (Docker default=application/octet-stream)


	##
	# Log settings
	##

	# Default log format of official Docker nginx image. Reserved.
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
				      '$status $body_bytes_sent "$http_referer" '
				      '"$http_user_agent" "$http_x_forwarded_for"';

	# Combined log format for Docker to log both http, https access and other details
	log_format  docker_combined	'$remote_addr - $remote_user [$time_local] '
							'$scheme/$ssl_protocol/$ssl_cipher '
							'"$host" "$request" $status $body_bytes_sent "$http_referer" '
							'"$http_user_agent" "$http_x_forwarded_for"';

	# Default logging mechanism of official Docker nginx image which sends logs back to Docker.
	access_log  /var/log/nginx/access.log	docker_combined;

	##
	# Connection settings (See http://nginx.org/en/docs/http/ngx_http_core_module.html )
	##

	sendfile on;					# Enables or disables the use of sendfile(). (default=off) (Docker default=on)
	#tcp_nopush on;					# Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux. (default=off)
	#tcp_nodelay on;				# Enables or disables the use of the TCP_NODELAY option. The option is enabled only when a connection is transitioned into the keep-alive state. (default=on)
	keepalive_timeout 65s;			# The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. timeout [header_timeout], the optional second parameter sets "Keep-Alive: timeout=time" response header. e.g.: 60 60. (default=75s)
	client_header_timeout 20s;		# Defines a timeout for reading client request header. (default=60s)
	client_body_timeout 20s;		# Defines a timeout for reading client request body. (default=60s)
	reset_timedout_connection on;	# Enables or disables resetting timed out connections. (default=off)
	send_timeout 20s;				# Sets a timeout for transmitting a response to the client. (default=60s)


	##
	# Hide Nginx version. Required both in proxy and upstream configurations. Verify with "curl -I http://localhost/ | grep Server"
	##

	server_tokens off;	# Enables or disables emitting nginx version on error pages and in the “Server” response header field. (default=on)


	##
	# Buffer settings (See http://nginx.org/en/docs/http/ngx_http_core_module.html )
	##

	#client_body_buffer_size  16k;		# Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. (default=16k)
	#client_header_buffer_size 1k;		# Sets buffer size for reading client request header. (default=1k)
	#large_client_header_buffers 4 8k;	# Sets the maximum number and size of buffers used for reading large client request header. (default=4 8k)
	
	# Increase maximum file upload size. This setting is present in both proxy and upstream configuration file templates
	client_max_body_size 16m;			# Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field. (default=1m)


	##
	# Connection Limits - DOS protection (See http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html )
	##

	# Limit the number of connections to the server per a client IP. With $binary_remote_addr, 1MB can hold 16K IPv4 addresses on 64bit OS.
	# If the zone storage is exhausted, the server will return the 503 (Service Temporarily Unavailable) error to all further requests.
	limit_conn_zone $binary_remote_addr zone=connperip:5m;	# Sets the shared memory zone and the maximum allowed number of connections for a given key value (default=)

	# Limit the total number of connections to the virtual host
	#limit_conn_zone $server_name zone=connperserver:10m;	#

	# HTTP Status 429 Too Many Requests is defined in RFC6585
	#limit_conn_status 429;									# Sets the status code to return in response to rejected requests (default=503)

	##
	# Request Limits - DOS protection (See http://nginx.org/en/docs/http/ngx_http_limit_req_module.html )
	##

	# Limit requests per second for a particular IP. With $binary_remote_addr, 1MB can hold 8K IPv4 addresses on 64bit OS.
	# If the zone storage is exhausted, the server will return the 503 (Service Temporarily Unavailable) error to all further requests.
	limit_req_zone $binary_remote_addr zone=reqperip:5m rate=100r/s;	# Sets parameters for a shared memory zone that will keep states for various keys. (default=)

	# Limit requests per second for virtual host
	#limit_req_zone $server_name zone=reqperserver:10m rate=100r/s;		#

	# HTTP Status 429 Too Many Requests is defined in RFC6585
	#limit_req_status 429;												# Sets the status code to return in response to rejected requests (default=503)

	##
	# gzip settings - proxy (See http://nginx.org/en/docs/http/ngx_http_gzip_module.html )
	##

	gzip on;				# Enables or disables gzipping of responses. (default=off)
	#gzip_static off;		# Enables (“on”) or disables (“off”) checking the existence of precompressed files. (default=off)
	#gzip_disable "";		# Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions. (default=)
	gzip_proxied any;		# Enables or disables gzipping of responses for proxied requests depending on the request and response. (default=off)
	gzip_vary on;			# Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives gzip, gzip_static, or gunzip are active. (default=off) (Tell the intermediate caches to store a separate cache entry for each "Accept-Encoding")
	gzip_min_length 1400;	# Sets the minimum length of a response that will be gzipped. (default=20) (Should be less than TCP MTU 1420 - minimum TCP header size 20, as it already fits into a single packet)
	#gzip_comp_level 1;		# Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9. (default=1)
	#gzip_buffers 16 8k;	# Sets the number and size of buffers used to compress a response. (default=16 8k)
	#gzip_http_version 1.1;	# Sets the minimum HTTP version of a request required to compress a response. (default=1.1)
	gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss image/svg+xml text/javascript text/x-js text/richtext text/xsd text/xsl image/x-icon text/x-component;	# Enables gzipping of responses for the specified MIME types in addition to “text/html”. Responses with the “text/html” type are always compressed. (default=text/html)

	##
	# Set trusted CDN/reverse proxy (Cloudflare etc...) IP address ranges to get real IP. (See http://nginx.org/en/docs/http/ngx_http_realip_module.html )
	##

	#real_ip_header X-Real-IP;						# Defines the request header field whose value will be used to replace the client address. (default=X-Real-IP)
	real_ip_header X-Forwarded-For;					#
	#real_ip_header CF-Connecting-IP;				#
	#real_ip_recursive off;							# If recursive search is disabled, the original client address that matches one of the trusted addresses is replaced by the last address sent in the request header field defined by the real_ip_header directive. (default=off)
	#include /configurations/cdn.conf;				# Include configuration file with set_real_ip_from directives and CDN/reverse proxy (Cloudflare etc...) IP address ranges, preferably downloaded automatically by a cron script.

	# *** There is also a ready to use Alpine based Docker image (vkucukcakar/ip-list-updater) to download CDN/reverse proxy (Cloudflare etc...) IP address ranges, create the configuration file to be included and reload Nginx container (https://hub.docker.com/r/vkucukcakar/ip-list-updater/ )

	# Note: If you want to allow CDN/reverse proxy (Cloudflare etc...) IP address ranges and deny others, you should do it by firewall. This cannot be done by nginx allow/deny since realip module already changes the IP.


	##
	# Common SSL settings (See http://nginx.org/en/docs/http/ngx_http_ssl_module.html )
	##

	ssl_session_cache shared:SSL:5m;	# 1MB can store about 4000 sessions. A cache with the same name can be used in several virtual servers. (default=none)
	ssl_session_timeout 10m;			# Specifies a time during which a client may reuse the session parameters. (default=5m)


	##
	# Common http2 parameters (See https://nginx.org/en/docs/http/ngx_http_v2_module.html )
	##

	#http2_chunk_size 8k;				# Sets the maximum size of chunks into which the response body is sliced. (default=8k)
	#http2_body_preread_size 64k;		# Sets the size of the buffer per each request in which the request body may be saved before it is started to be processed. (default=64k)
	#http2_idle_timeout 3m;				# Sets the timeout of inactivity after which the connection is closed. (default=3m)
	#http2_max_concurrent_streams 128;	# Sets the maximum number of concurrent HTTP/2 streams in a connection. (default=128)
	#http2_max_field_size 4k;			# Limits the maximum size of an HPACK-compressed request header field. (default=4k)
	#http2_max_header_size 16k;			# Limits the maximum size of the entire request header list after HPACK decompression. (default=16k)
	#http2_max_requests 1000;			# Sets the maximum number of requests that can be served through one HTTP/2 connection, after which the connection is closed and the client should use a new connection. (default=1000)
	#http2_recv_buffer_size 256k;		# Sets the maximum number of requests that can be served through one HTTP/2 connection, after which the connection is closed and the client should use a new connection. (default=256k)
	#http2_recv_timeout 30s;			# Sets the timeout for expecting more data from the client, after which the connection is closed. (default=30s)
	#http2_push_preload on;				# Enables automatic conversion of preload links specified in the “Link” response header fields into push requests (default=off)
	

	##
	# Naxsi (web application firewall). Include Naxsi core rules
	##

	# Include Naxsi core rules (Ready in image. Downloaded from https://github.com/nbs-system/naxsi )
	include /etc/nginx/naxsi/naxsi_core.rules;


 	##
	# Miscellaneous settings
	##

	#server_names_hash_bucket_size 64;	# Sets the bucket size for the server names hash tables. (default=32|64|128)
	#server_names_hash_max_size 512;	# Sets the maximum size of the server names hash tables. (default=512)

	##
	# Server-wide https redirect server block
	# Uncomment this block and comment "listen* 80*" directives on the next server block and on nginx-example.com.conf to redirect all HTTP requests to HTTPS.
	##

	#server {
	#	listen 80 default_server;				# Listen on IPv4, port 80
	#	listen [::]:80 default_server;			# Listen on IPv6, port 80
	#	return 301 https://$host$request_uri;	# Redirect to HTTPS
	#}

	##
	# Default server block
	# You can deny all unknown hosts including clients accessing by server IP address
	##

	server {
		listen 80 default_server;								# Listen on IPv4, port 80
		listen [::]:80 default_server; 							# Listen on IPv6, port 80
		listen 443 ssl default_server;							# Listen on IPv4, port 443 ssl with HTTP/2 support
		listen [::]:443 ssl default_server; 					# Listen on IPv6, port 443 ssl with HTTP/2 support
		ssl_certificate /etc/nginx/ssl/default_server.crt;		# Using self signed certificate created via "AUTO_CONFIGURE" and "CERT_CREATE_default_server" environment options
		ssl_certificate_key /etc/nginx/ssl/default_server.key;	#
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;					#
		ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
		ssl_prefer_server_ciphers on;							#
		return 403;												# Deny all
		#return 444;											# Make nginx close connection without response
		#return 301 https://example.com;						# Redirect to a default server (Of course you can comment this block and just add "default_server" to your default server)
	}

	##
	# Proxy cache. Cache zone parameters (See http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path ) (Also see https://www.nginx.com/blog/nginx-caching-guide/ )
	##

	#proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=proxy_cache_zone:10m max_size=1g inactive=10m use_temp_path=off;	# Sets the path and other parameters of a cache. (keys_zone: a 10MB key zone can store data for about 80,000 keys. max_size: self explanatory. inactive: cache timeout. See the link above for other parameters.)

	##
	# Include other reverse proxy configurations
	##

	include /etc/nginx/conf.d/*.conf;

}


##
# Note: ngx_http_realip_module perfectly sets the real ip server-wide.
#       logs, deny, allow, $remote_addr, $binary_remote_addr, limit_conn and everything works as expected!
##




