###
# vkucukcakar/nginx
# NGINX Docker image with automatic configuration file creation and export
# Copyright (c) 2017 Volkan Kucukcakar
#
# This file is part of vkucukcakar/nginx.
#
# vkucukcakar/nginx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# vkucukcakar/nginx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This copyright notice and license must be retained in all files and derivative works.
###

###
# Container     : ${CONTAINER_NAME}
# Symbolic link : /etc/nginx/conf.d/nginx-${_UPSTREAM_DOMAIN_NAME}.conf
# Description   : Reverse proxy, Nginx server block configuration file. Mostly resource related Nginx settings are present and well-commented. Edit according to your needs.
# Note          : This file is automatically created by vkucukcakar/nginx image
###


##
# Upstream block
##

upstream upstream-${_UPSTREAM_CONTAINER_NAME} {
	server ${_UPSTREAM_CONTAINER_NAME}:80;

	# This directive does not limit the total number of connections to upstream servers that an nginx worker process
	# can open. The connections parameter should be set to a number small enough to let upstream servers process
	# new incoming connections as well. (See http://nginx.org/en/docs/http/ngx_http_upstream_module.html )
	keepalive 32;
}


##
# Domain-wide HTTPS redirect server block (Without Let's Encrypt support) (Use the next block if you want Let's Encrypt support)
# Uncomment this block and comment "listen* 80*" directives on the main proxy server block to redirect all HTTP requests to HTTPS.
##

#server {
#	listen 80;								# Listen on IPv4, port 80
#	listen [::]:80;							# Listen on IPv6, port 80
#	server_name .${_UPSTREAM_DOMAIN_NAME};	# A wildcard name in the form ".example.com" will match both "example.com" and "*.example.com"
#	return 301 https://$host$request_uri;	# Redirect to HTTPS
#}


##
# Domain-wide HTTPS redirect server block (With Let's Encrypt support) (Use the previous block if you have nothing to do with Let's Encrypt)
# Uncomment this block and comment "listen* 80*" directives on the main proxy server block to redirect all HTTP requests to HTTPS.
##

#server {
#	listen 80;									# Listen on IPv4, port 80
#	listen [::]:80;								# Listen on IPv6, port 80
#	server_name .${_UPSTREAM_DOMAIN_NAME};		# A wildcard name in the form ".example.com" will match both "example.com" and "*.example.com"
#	location / {
#		return 301 https://$host$request_uri;	# Redirect to HTTPS
#	}
#	# Let's Encrypt support. Allow the hidden file for Certbot client's webroot plugin with ACME challenge. Must be also allowed in the upstream server configuration file.
#	location ~ ^/\.well-known/acme-challenge {
#		include	/configurations/nginx-location-${_UPSTREAM_DOMAIN_NAME}.conf;
#	}
#	# Naxsi /RequestDenied
#	location /RequestDenied {
#		return 403;
#	}
#}


##
# Proxy server block
##

server {

	##
	# Proxy
	##

	listen 80;								# Listen on IPv4, port 80
	listen [::]:80;							# Listen on IPv6, port 80
	listen 443 ssl http2;					# Listen on IPv4, port 443 ssl with HTTP/2 support
	listen [::]:443 ssl http2;				# Listen on IPv6, port 443 ssl with HTTP/2 support
	server_name .${_UPSTREAM_DOMAIN_NAME};	# A wildcard name in the form ".example.com" will match both "example.com" and "*.example.com"

	##
	# Virtual host SSL settings. Using self signed certificates by default. (See http://nginx.org/en/docs/http/ngx_http_ssl_module.html )
	##

	ssl_certificate /etc/nginx/ssl/${_UPSTREAM_DOMAIN_NAME}.crt;
	ssl_certificate_key /etc/nginx/ssl/${_UPSTREAM_DOMAIN_NAME}.key;

	##
	# Let's Encrypt support. (Comment the self signed certificates above if you enable this)
	##
	
	#ssl_certificate /etc/letsencrypt/live/${_UPSTREAM_DOMAIN_NAME}/fullchain.pem;
	#ssl_certificate_key /etc/letsencrypt/live/${_UPSTREAM_DOMAIN_NAME}/privkey.pem;


	# Recommendations from https://wiki.mozilla.org/Security/Server_Side_TLS
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

	ssl_prefer_server_ciphers on;

	#ssl_ecdh_curve prime256v1; # this may not meet openssl ecdsa curve, they are different things
	#ssl_dhparam /etc/nginx/ssl/dhparam.pem; # change dh parameters for extra security; optional

	
	##
	# Proxy no-cache. Prepare no-cache directives for some conditions. (*Note: "If" inside location is still evil*)
	##
	
	## Cache by default
	#set $no_cache 0;
	#
	## Do not cache if query string is not empty
	#if ($query_string != "") {
	#	set $no_cache 1;
	#}	
	#
	#### Note: You should write your own application's $no_cache conditions for authenticated users and various URLs. Please see the Wordpress examples below.	
	#
	## Wordpress - Do not cache logged in users and comment authors
	#if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
	#	set $no_cache 1;
	#}
	#
	## Wordpress - Do not cache some URLs
	#if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|sitemap.*.xml)") {
	#	set $no_cache 1;
	#}	
	

	##
	# Location block
	##

	location / {
		include	/configurations/nginx-location-${_UPSTREAM_DOMAIN_NAME}.conf;
	}

	##
	# Naxsi /RequestDenied
	##

	location /RequestDenied {
		return 403;
	}

}
